# -*- coding: utf-8 -*-
"""задание 9 1.ipynb"

Automatically generated by Colaboratory.


# Упражнения по работе с веб-камерой


Задания этого урока будет проще выполнить на локальном компьютере, поскольку они предполагают работу с веб-камерой. Для работы на локальном компьютере вам потребуются установленные библиотеки numpy и openCV. Для работы с ними можно использовать либо непосредственно интерпретатор, либо виртуальное окружение.

Ниже находится несколько упражнений, представляющих собой код с пропущенными фрагментами, которые надо воспроизвести. Часть из этих упражнений очень простые, над некоторыми надо хорошенько подумать. 

Чтобы выполнить это задание, нужно сохранить копию файла себе на компьютер и запустить в Jupyter Notebook.
После выполнения задания, его нужно отправить на проверку. Для этого достаточно предоставить доступ к файлу и отправить ссылку в соответствующее поле LMS курса.
## Импортируем библиотеки
"""

import cv2 # импортируем OpenCV
import numpy as np # импортируем numpy
import time # импортируем библиотеку для работы со временем

"""### Упражнение 1
Используя класс VideoCapture() выведите изображение с веб-камеры на экран.
"""

import cv2
vid = cv2.VideoCapture('D:\Загрузки\Первое видео с Марса со звуком и в цвете.mp4')
while True:
    ok, frame = vid.read()
    if not ok:
        break
    cv2.imshow('demo', frame)
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break
vid.release()
cv2.destroyAllWindows()
cv2.waitKey(1)

"""### Упражнение 2
Добавьте на видео произвольную надпись.
"""

import cv2
vid = cv2.VideoCapture('D:\Загрузки\Первое видео с Марса со звуком и в цвете.mp4')
while True:
    ok, frame = vid.read()
    if not ok:
        break
    frame = cv2.putText(frame, "Mars", (100, 300),cv2.FONT_HERSHEY_SIMPLEX, 2,(0, 0, 255), 2)
    cv2.imshow('demo', frame)
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break
vid.release()
cv2.destroyAllWindows()
cv2.waitKey(1)

"""### Упражнение 3
Сделайте видео черно-белым.
"""

import cv2
vid = cv2.VideoCapture('D:\Загрузки\Первое видео с Марса со звуком и в цвете.mp4')
while True:
    ok, frame = vid.read()
    if not ok:
        break
    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)
    cv2.imshow('demo', frame)
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break
vid.release()
cv2.destroyAllWindows()
cv2.waitKey(1)

"""### Упражнение 4
Напишем код, который будет выводить на видео информацию о количестве кадров, обрабатываемых в секунду (FPS - frames per second).

Для этого можно использовать функцию time() из модуля time, который мы импортировали в начале блокнота с другими библиотеками. Эта функция фиксирует текущее время. 

Чтобы посчитать кадры, нужно посчитать, за какое время обрабатывается одна итерация цикла while. Время обработки одной итерации - это период (T). FPS - это частота (f). Из школьной физики мы знаем, как эти две величины связаны между собой:

$$ f = \frac{1}{T} $$
"""

import cv2
vid = cv2.VideoCapture('D:\Загрузки\Первое видео с Марса со звуком и в цвете.mp4')
while True:
    fps = vid.get(cv2.CAP_PROP_FPS)
    ok, frame = vid.read()
    print(fps)
    if not ok:
        break
    frame = cv2.putText(frame, "Mars", (100, 300),cv2.FONT_HERSHEY_SIMPLEX, 2,(0, 0, 255), 2)
    cv2.imshow('demo', frame)
    if cv2.waitKey(1) & 0xFF == ord("q"):
        
        break
vid.release()
cv2.destroyAllWindows()