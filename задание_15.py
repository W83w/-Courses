# -*- coding: utf-8 -*-
"""Задание 15.ipynb

Automatically generated by Colaboratory.

"""

from google.colab import drive
drive.mount('/content/drive')

!pip install tslearn

from tslearn.clustering import TimeSeriesKMeans
import numpy as np
import pandas as pd # для работы с таблицами

w = TimeSeriesKMeans(n_clusters=2)

import pandas as pd
dfL = []
for i in range(1, 13):
  if i >= 10:
    n = str(i)
  else:
    n = '0' + str(i)
df_comfimed = pd.read_csv('/content/drive/MyDrive/time_series_covid19_confirmed_global.csv')
df_comfimed.head(3)#подтвержденные случаи

df_deaths = pd.read_csv('/content/drive/MyDrive/time_series_covid19_deaths_global.csv') # смертность
df_deaths.head(3)#Смертность

from tslearn.utils import to_time_series_dataset

ts = to_time_series_dataset(dfL)

Country_Region_num = list(set(df_comfimed['Country/Region']))
               #['iso3'] , ['Admin2'] , ['Province_State'] ,['Country_Region'])) # Избавляемся от слов преобразуя в числа
Country_Region_deaths = list(set(df_deaths['Country/Region']))
df_comfimed.head(3)

d = {} 
for i in range(len(df_comfimed['Country/Region'])):
  d.update({df_comfimed['Country/Region'][i]: i})

print(d)
df_comfimed

d_deaths = {} 
for i in range(len(df_deaths['Country/Region'])):
  d_deaths.update({df_deaths['Country/Region'][i]: i})

print(d)
print(d_deaths)
# создаю словарь и пробегаюсь в цикле И обнавляю названия  :, "b":"d"  df.loc[:, 'foo':'cat':2]

df_comfimed['Country_Region_num'] = ''
#Добавляю столбец
for index, row in df_comfimed.iterrows():
  df_comfimed['Country_Region_num'].iloc[index] = d[row['Country/Region']]
#Пепебираю все строки В новый столбец в новый столбец данные из того списка  
df_comfimed.head()

df_deaths['Country_Region_deaths'] = ''
#Добавляю столбец
for index, row in df_comfimed.iterrows():
  df_deaths['Country_Region_deaths'].iloc[index] = d_deaths[row['Country/Region']]
#Пепебираю все строки В новый столбец в новый столбец данные из того списка  
df_deaths.head()

df2 = df_comfimed.loc['12/6/21':'Country_Region_num']
df2
df_comfimed_22 = df_comfimed.loc[:, "12/6/21":"Country_Region_num":1]
print(df_comfimed_22)

df_comfimed_22_data = df_comfimed.loc[:, "12/6/21":"12/6/22":1]

df2_d = df_deaths.loc['12/6/21':'Country_Region_deaths']
df2_d
df_d_22 = df_deaths.loc[:, "12/6/21":"Country_Region_deaths":1]
print(df_d_22)
df_d_22_data = df_comfimed.loc[:, "12/6/21":"12/6/22":1]

y = list(df_comfimed['1/6/21']) #Что бы построить график

print(len(df_comfimed.columns))
df_comfimed.columns # все колонки

from sklearn.preprocessing import StandardScaler

import matplotlib.pyplot as plt # чтобы определить 17 к записей разделить на некоторое кол кластеров
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
scaledDF = sc.fit_transform(df_comfimed_22)
wcss = []
for i in range(2, 11):
  kmean = KMeans(n_clusters=i)
  kmean.fit(scaledDF)
  print(i)
  day = plt.scatter(df_comfimed_22["Country_Region_num"], df_comfimed_22['12/6/22'], c=kmean.labels_)
  plt.show(day)
  for i in df_comfimed_22_data:
    plt.scatter(df_comfimed_22["Country_Region_num"], df_comfimed_22[i], c=kmean.labels_)
  plt.show()
  wcss.append(kmean.inertia_)
plt.plot(range(2,11), wcss) # кол кластеров 2 11
plt.show()
# в конце графи мера разброса график локтя

import matplotlib.pyplot as plt # чтобы определить 17 к записей разделить на некоторое кол кластеров
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
scaledDF = sc.fit_transform(df_d_22_data)
wcss = []
for i in range(1, 13):
  kmean = KMeans(n_clusters=i)
  kmean.fit(scaledDF)
  day = plt.scatter(df_d_22["Country_Region_deaths"], df_d_22_data['12/6/22'], c=kmean.labels_)
  plt.show()
  print(i)
  for i in df_d_22_data:
    plt.scatter(df_d_22["Country_Region_deaths"], df_d_22_data[i], c=kmean.labels_)
  plt.show()
  wcss.append(kmean.inertia_)
plt.plot(range(1, 13), wcss) # кол кластеров 2 11
plt.show()

"""Здесь видно как за год увеличивалось общее количество заразившихся и умерших

> Блок с отступами


"""